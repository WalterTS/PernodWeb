<?php

namespace WE\ReportBundle\Entity\Repository;

/**
 * ActivacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivacionRepository extends \Doctrine\ORM\EntityRepository {

    public function getMainQuery($brand = null, $status = null, $user = null, $parameters = null, $calendar =  false) {
        $query = $this->createQueryBuilder('a')
                ->leftJoin('a.proyecto', 'p')
                ->leftJoin('a.cdc', 'c')
                ->leftJoin('c.plaza', 'plz')
                ->leftJoin('plz.region', 'r')
                ->leftJoin('a.usuarios', 'u')
                ->orderBy('a.fecha', $calendar ? 'ASC' : 'DESC');
                
        if ($calendar) {
            $today = new \DateTime('now');
            $query->where('a.fecha >= :today')
            ->setParameter('today', $today);
        }

        if ($brand) {
            $query->where('p.marca = :marca')
                    ->setParameter('marca', $brand);
        }

        if ($status) {
            if (is_array($status)) {
                $query->leftJoin('a.status', 's')
                        ->andWhere('s.id IN (' . implode(',', $status) . ')');
            } else {
                $query->andWhere('a.status = :status')
                        ->setParameter('status', $status);
            }
        }

        if ($user) {
            $query
                    ->andWhere('u.usuario = :user')
                    ->setParameter('user', $user);
        }

        if ($parameters && isset($parameters['date_from']) && isset($parameters['date_to']) && $parameters['date_to'] && $parameters['date_from']) {

            $from = new \DateTime($parameters['date_from']);
            $to = new \DateTime($parameters['date_to']);
            $to->modify('+1 day');

            $query->andWhere('a.fecha BETWEEN :from AND :to')
                    ->setParameter('from', $from)
                    ->setParameter('to', $to);
        }

        if ($parameters && isset($parameters['cdc_tipo']) && $parameters['cdc_tipo']) {
            $query->andWhere('c.tipo = :tipo')
                    ->setParameter('tipo', $parameters['cdc_tipo']);
        }

        if ($parameters && isset($parameters['usuario']) && $parameters['usuario']) {
            $query->andWhere('u.usuario IN (:usuarios)')
                    ->setParameter('usuarios', $parameters['usuario']);
        }

        if ($parameters && isset($parameters['cdc']) && $parameters['cdc']) {
            $query->andWhere('a.cdc IN (:cdcs)')
                    ->setParameter('cdcs', $parameters['cdc']);
        }

        if ($parameters && isset($parameters['region']) && $parameters['region']) {
            $query->andWhere('plz.region IN (:regiones)')
                    ->setParameter('regiones', $parameters['region']);
        }

        if ($parameters && isset($parameters['plaza']) && $parameters['plaza']) {
            $query->andWhere('c.plaza IN (:plazas)')
                    ->setParameter('plazas', $parameters['plaza']);
        }

        return $query;
    }

    public function findByBrandQuery($brand = null, $status = null, $user = null, $parameters = null, $calendar = false) {
        return $this->getMainQuery($brand, $status, $user, $parameters, $calendar)->getQuery();
    }

    public function findByPromedio($brand = null, $status = null, $user = null, $parameters = null) {
        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('AVG(v.valor) as total,CONCAT(c.nombre,\' \',plz.abreviacion) as abreviacion')
                ->leftJoin('a.filas', 'f')
                ->leftJoin('f.valores', 'v')
                ->andWhere('v.columna IN (:columnas)')
                ->setParameter('columnas', $parameters['columnas'])
                ->orderBy('v.columna', 'ASC')
                ->groupBy(' v.columna,abreviacion');

        return $query->getQuery()->execute();
    }

    public function findByVentas($brand = null, $status = null, $user = null, $parameters = null) {
        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('c.nombre as cdc,SUM(a.copeo) as ventas, COUNT(a.id) as activaciones, AVG(a.copeo) as ventas_promedio')
                ->leftJoin('a.proyecto', 'pr')
                ->groupBy('c.id');

        return $query->getQuery()->execute();
    }

    public function findByComentarios($brand, $status, $user, $parameters) {

        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('a.fecha,c.nombre as cdc,m.nombre as marca,v.valor')
                ->leftJoin('a.filas', 'f')
                ->leftJoin('a.proyecto', 'pr')
                ->leftJoin('pr.marca', 'm')
                ->leftJoin('f.valores', 'v')
                ->leftJoin('v.columna', 'col')
                ->andWhere('v.columna IN (:columnas)')
                ->setParameter('columnas', $parameters['comentarios_id'])
                ->groupBy('a.id')
        ;
        return $query->getQuery()->execute();
    }

    public function findByPromotions($brand, $status, $user, $parameters) {

        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('a.fecha,c.nombre as cdc,m.nombre as marca,v.valor')
                ->leftJoin('a.filas', 'f')
                ->leftJoin('a.proyecto', 'pr')
                ->leftJoin('pr.marca', 'm')
                ->leftJoin('f.valores', 'v')
                ->leftJoin('v.columna', 'col')
                ->andWhere('v.columna IN (:columnas)')
                ->setParameter('columnas', $parameters['promociones_id'])
                ->groupBy('a.id')
        //->orderBy('v.columna')
        ;
        return $query->getQuery()->execute();
    }

    public function findByShare($brand, $status, $user, $parameters) {
        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('SUM(v.valor) as total,col.texto')
                ->leftJoin('a.filas', 'f')
                ->leftJoin('a.proyecto', 'pr')
                ->leftJoin('f.valores', 'v')
                ->leftJoin('v.columna', 'col')
                ->andWhere('v.columna IN (:columnas)')
                ->setParameter('columnas', $parameters['columnas'])
                ->groupBy('v.columna')
                ->orderBy('v.columna');
        return $query->getQuery()->execute();
    }

    public function findByValue($brand = null, $status = null, $user = null, $parameters = null) {
        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('SUM(v.valor) as total,plz.abreviacion')
                ->leftJoin('a.filas', 'f')
                ->leftJoin('a.proyecto', 'pr')
                ->leftJoin('f.valores', 'v')
                ->andWhere('v.columna IN (:columnas)')
                ->setParameter('columnas', $parameters['columnas'])
                ->groupBy(' v.columna');

        return $query->getQuery()->execute();
    }

    public function findByBrand($brand = null, $status = null, $user = null, $parameters = null, $calendar = false) {
        return $this->findByBrandQuery($brand, $status, $user, $parameters, $calendar)->execute();
    }

    public function findByShareByCDC($brand, $status, $user, $parameters) {
        $query = $this->getMainQuery($brand, $status, $user, $parameters)
                ->select('v.valor AS total, col.texto, c.id, c.nombre')
                ->leftJoin('a.filas', 'f')
                ->leftJoin('a.proyecto', 'pr')
                ->leftJoin('f.valores', 'v')
                ->leftJoin('v.columna', 'col')
                ->andWhere('v.columna IN (:columnas)')
                ->setParameter('columnas', $parameters['columnas'])
                ->groupBy('a.cdc, v.columna')
                ->orderBy('v.columna');
        return $query->getQuery()->execute();
    }

}
